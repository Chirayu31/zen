// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  CollabRequests CollabRequests[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String @id
  userId      String
  title       String
  description String
  about       String

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestone      Milestone[]
  techstack      TechStack[]
  CollabRequests CollabRequests[]
}

model TechStack {
  id        String   @id
  name      String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Milestone {
  id          String   @id
  projectId   String
  title       String
  description String
  deadline    DateTime
  status      String
  project     Project? @relation(fields: [projectId], references: [id])
}

model CollabRequests {
  id        String   @id
  projectId String
  senderId  String
  message   String
  status    String
  date      DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id])
  sender    User?    @relation(fields: [senderId], references: [id])
}
